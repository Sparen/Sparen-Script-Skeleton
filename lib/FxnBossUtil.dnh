/* ******************************************************************
* Sparen's Boss Utility Library
* For use with Touhou Danmakufu ph3
* (C) Sparen of Iria 2015
*
* Code in this library is under the MIT License and may be 
* redistributed/modified without express permission
****************************************************************** */

/* ******************************************************************
* This library is meant to store all tasks used for boss effects 
* in boss battles.
****************************************************************** */

/* *************************************************************************
*EnemyMarker(obj, obj) -- Creates an enemy marker for the given object
*Param: obj (obj) - Object to render under
*Param: bossobj (obj) - Object whose presence is used to determine whether or not the marker should exist
************************************************************************* */
task EnemyMarker(obj, bossobj) {
    let imgnumber = GetCurrentScriptDirectory() ~ "../img/EnemyMarkerGear.png";
    let objEnemy = ObjPrim_Create(OBJ_SPRITE_2D);
    let objcount = 0;
    let gears = [ObjPrim_Create(OBJ_SPRITE_2D), ObjPrim_Create(OBJ_SPRITE_2D)];
    ObjRender_SetPosition(gears[0], GetCenterX, GetStgFrameHeight + 32, 1);
    ObjRender_SetPosition(gears[1], GetCenterX, GetStgFrameHeight + 32, 1);
    Obj_SetRenderPriority(gears[0], 0.85);
    Obj_SetRenderPriority(gears[1], 0.85);
    ObjPrim_SetTexture(gears[0], imgnumber);
    ObjPrim_SetTexture(gears[1], imgnumber);
    ObjSprite2D_SetSourceRect(gears[0], 0, 0, 63, 63);
    ObjSprite2D_SetSourceRect(gears[1], 0, 0, 63, 63);
    ObjSprite2D_SetDestRect(gears[0], -11, -11, 12, 12);
    ObjSprite2D_SetDestRect(gears[1], -11, -11, 12, 12);
    while(ObjEnemy_GetInfo(bossobj, INFO_LIFE) > 0) {
        ObjRender_SetPosition(gears[0], GetEnemyX(obj) + 32 + 12, GetStgFrameHeight + 26, 1);
        ObjRender_SetPosition(gears[1], GetEnemyX(obj) + 32 - 12, GetStgFrameHeight + 26, 1);
        ObjRender_SetAngleZ(gears[0], -480*sin(objcount));
        ObjRender_SetAngleZ(gears[1], 480*sin(objcount));
        objcount++;
        yield;
    }
    loop(12) { //It can only handle 12 yields, currently, before the script is closed.
        yield;
    }
    Obj_Delete(objEnemy);
}

/* *************************************************************************
*EnemyName(obj, obj) -- Creates an enemy name based on the current Boss CommonData
*Param: bossobj (obj) - Object whose presence is used to determine whether or not the name should exist
************************************************************************* */
task EnemyName(bossobj) {
    let diffindex = GetCommonData("Boss", 0); 
    let objText = ObjText_Create();
    ObjText_SetText(objText, "Elemental Orb");
    ObjText_SetFontSize(objText, 11);
    ObjText_SetFontType(objText, "Russell Square Regular");
    ObjText_SetFontBold(objText, false);
    ObjText_SetFontColorTop(objText, 255, 255, 255);
    ObjText_SetFontColorBottom(objText, 255, 255, 255);
    ObjText_SetFontBorderType(objText, BORDER_FULL);
    ObjText_SetFontBorderColor(objText, 255, 255, 255);
    ObjText_SetFontBorderWidth(objText, 1);
    Obj_SetRenderPriority(objText, 0.8);
    ObjRender_SetX(objText, 5);
    ObjRender_SetY(objText, 12);
    if(diffindex == 0) {
        ObjText_SetFontBorderColor(objText, 128, 128, 128);
        ObjText_SetText(objText, "Boss Name");
    }
    while(ObjEnemy_GetInfo(bossobj, INFO_LIFE) > 0) {
        yield;
    }
    loop(12) { //It can only handle 12 yields, currently, before the script is closed.
        yield;
    }
    Obj_Delete(objText);
}

/* *************************************************************************
*MagicCircleCustom(obj, obj, int, double) -- Creates a magic circle behind the target object
*Param: obj (obj) - Object to render the magic circle under
*Param: bossobj (obj) - Object whose presence is used to determine whether or not the magic circle should exist
*Param: dir (int) - Spin direction of magic circle
*Param: scale (double) - Scaling of magic circle
************************************************************************* */
task MagicCircleCustom(obj, bossobj, dir, scale) {
    let diffindex = GetCommonData("Boss", 0); 
    let imgcirc = GetCurrentScriptDirectory() ~ "../img/MagCirc.png";
    let circlecount = 0;
    let objCirc = ObjPrim_Create(OBJ_SPRITE_2D);
    ObjRender_SetPosition(objCirc, GetEnemyX(obj), GetEnemyY(obj), 1); 
    ObjPrim_SetPrimitiveType(objCirc, PRIMITIVE_TRIANGLESTRIP);
    ObjRender_SetBlendType(objCirc, BLEND_ADD_ARGB);
    Obj_SetRenderPriority(objCirc, 0.39);
    ObjPrim_SetTexture(objCirc, imgcirc);
    ObjRender_SetAlpha(objCirc, 150);
    ObjRender_SetColor(objCirc, 255, 255, 255);
    ObjSprite2D_SetSourceRect(objCirc, 0, 0, 512, 512);
    ObjSprite2D_SetDestCenter(objCirc);
    ObjRender_SetScaleXYZ(objCirc, scale, scale, 1); 
    if(diffindex == 0) {
        ObjRender_SetColor(objCirc, 255, 255, 255);
    }
    while(ObjEnemy_GetInfo(bossobj, INFO_LIFE) > 0) {
        ObjRender_SetAngleXYZ(objCirc, 60*sin(circlecount/4), 30*sin(circlecount/3), circlecount*2*dir);
        ObjRender_SetPosition(objCirc, GetEnemyX(obj), GetEnemyY(obj), 1);
        circlecount++;
        yield;
    }
    loop(12) { //It can only handle 12 yields, currently, before the script is closed.
        yield;
    }
    Obj_Delete(objCirc);
}

/* *************************************************************************
*BossAura(obj, obj, int) -- Creates an aura behind the target object
*Param: obj (obj) - Object to render the aura under
*Param: bossobj (obj) - Object whose presence is used to determine whether or not the aura should exist
*Param: dir (int) - Flip orientation of aura
************************************************************************* */
task BossAura(obj, bossobj, dir) {
    let diffindex = GetCommonData("Boss", 0); 
    let imgaura = GetCurrentScriptDirectory() ~ "../img/BossAura.png";
    let animframe = 3;
    let objA = ObjPrim_Create(OBJ_SPRITE_2D);
    ObjRender_SetPosition(objA, GetEnemyX(obj), GetEnemyY(obj), 1); 
    ObjRender_SetBlendType(objA, BLEND_ADD_ARGB);
    Obj_SetRenderPriority(objA, 0.39);
    ObjPrim_SetTexture(objA, imgaura);
    ObjRender_SetAlpha(objA, 250);
    ObjRender_SetColor(objA, 255, 255, 255);
    ObjSprite2D_SetSourceRect(objA, 0, 0, 85.3, 85);
    ObjSprite2D_SetDestCenter(objA);
    ObjRender_SetScaleXYZ(objA, 1*dir, 1, 1); 
    while(ObjEnemy_GetInfo(bossobj, INFO_LIFE) > 0) {
        if(diffindex == 0) {
            ObjRender_SetColor(objA, 192 + 30*sin(animframe*6), 192 + 30*sin(animframe*6), 192 + 30*sin(animframe*6));   
        }

        alternative(floor(animframe/2)) //Hardcoding to make it smoother.
        //case(0) {ObjSprite2D_SetSourceRect(objA, 0, 0, 85.3, 85);} //THE EVIL CASE
        case(1) {ObjSprite2D_SetSourceRect(objA, 85.3, 0, 85.3*2, 85);}
        case(2) {ObjSprite2D_SetSourceRect(objA, 85.3*2, 0, 85.3*3, 85);}
        case(3) {ObjSprite2D_SetSourceRect(objA, 85.3*3, 0, 85.3*4, 85);}
        case(4) {ObjSprite2D_SetSourceRect(objA, 85.3*4, 0, 85.3*5, 85);}
        case(5) {ObjSprite2D_SetSourceRect(objA, 85.3*5, 0, 85.3*6, 85);}
        case(6) {ObjSprite2D_SetSourceRect(objA, 85.3*6, 0, 85.3*7, 85);}
        case(7) {ObjSprite2D_SetSourceRect(objA, 85.3*7, 0, 85.3*8, 85);}
        case(8) {ObjSprite2D_SetSourceRect(objA, 85.3*8, 0, 85.3*9, 85);}
        case(10) {ObjSprite2D_SetSourceRect(objA, 85.3*9, 0, 85.3*10, 85);}
        case(11) {ObjSprite2D_SetSourceRect(objA, 85.3*10, 0, 85.3*11, 85);}
        case(12) {ObjSprite2D_SetSourceRect(objA, 85.3*11, 0, 85.3*12, 85);}

        ObjSprite2D_SetDestRect(objA, -80, -100, 80, 60);
        ObjRender_SetPosition(objA, GetEnemyX(obj), GetEnemyY(obj), 1);
        animframe++;
        if(animframe == 24) { //Reset animframe after 20 frames. Change no. depending on num. sprites
            animframe = 2;
        }
        //The first frame is bugged, so I have to go without it. -_-
        yield;
    }
    loop(12) { //It can only handle 12 yields, currently, before the script is closed.
        yield;
    }
    Obj_Delete(objA);
}

/* *************************************************************************
*EMagicCircle(obj, obj) -- Creates a life-dependent magic circle behind the target object
*Param: obj (obj) - Object to render the magic circle under
*Param: bossobj (obj) - Object whose presence is used to determine whether or not the magic circle should exist
************************************************************************* */
task EMagicCircle(objEnemy, bossobj) { //Invincibility circle, ripped from Random Player Generator
    let countVertex = 64; //Orig 64. 48 is good
    let listRadius = [];
    loop(countVertex) {
        listRadius = listRadius ~ [0];
    }
    let path = GetCurrentScriptDirectory() ~ "../img/EMagicCircle.png";
    let obj = ObjPrim_Create(OBJ_PRIMITIVE_2D);
    ObjPrim_SetPrimitiveType(obj, PRIMITIVE_TRIANGLESTRIP);
    ObjPrim_SetVertexCount(obj, countVertex);
    ObjRender_SetBlendType(obj, BLEND_ADD_RGB);
    Obj_SetRenderPriority(obj, 0.40);
    ObjPrim_SetTexture(obj, path);
    ascent(iVert in 0..countVertex / 2) {
        let left = iVert * 128;
        let indexVert = iVert * 2;
        ObjPrim_SetVertexUVT(obj, indexVert + 0, left, 0);
        ObjPrim_SetVertexUVT(obj, indexVert + 1, left, 64);                
    }

    let cx = 0;
    let cy = 0;
    let maxRadius = 96;
    let alpha = 0;
    let frame = 0;
    let angleRender = 0;

    while(ObjEnemy_GetInfo(bossobj, INFO_LIFE) > 0) {
        alpha += 1 / 120;
        alpha = min(alpha, 1);
        angleRender += 360 / countVertex / 8; //Last number is best way to control rotation speed. Lower is faster
        Obj_SetVisible(obj, true);

        let rRate = 100 / 100; //Radius rate. 

        ascent(iVert in 0..countVertex / 2) {
            let indexVert = iVert * 2;
            let angle = 360 / (countVertex / 2 - 1) * iVert;
            let vx1 = listRadius[indexVert] * cos(angle);
            let vy1 = listRadius[indexVert] * sin(angle);
            ObjPrim_SetVertexPosition(obj, indexVert + 0, vx1, vy1, 0);
            let vx2 = listRadius[indexVert+1] * cos(angle);
            let vy2 = listRadius[indexVert+1] * sin(angle);
            ObjPrim_SetVertexPosition(obj, indexVert + 1, vx2, vy2, 0);
            if(frame >= 0) {
                let dr = (maxRadius * rRate - listRadius[indexVert]) / 8;
                listRadius[indexVert] = listRadius[indexVert] + dr;
            }
            if(frame > 10) {
                let rRateIn = rRate - 0.12;
                if(rRateIn < 0) {rRateIn = 0;}
                let dr = (maxRadius * rRateIn - listRadius[indexVert + 1]) / 16;
                listRadius[indexVert + 1] = listRadius[indexVert + 1] + dr;
            }

        }
        ObjRender_SetColor(obj, 192 * alpha, 192 * alpha, 255 * alpha);
        ObjRender_SetPosition(obj, ObjMove_GetX(objEnemy), ObjMove_GetY(objEnemy), 0);
        ObjRender_SetAngleZ(obj, angleRender);
        frame++;
        yield;
    }
    loop(12) { //It can only handle 12 yields, currently, before the script is closed.
        yield;
    }
    Obj_Delete(obj);
}

/* *************************************************************************
*EnemySetup(obj) -- Sets up utilities for given object
*Param: obj1 (obj) - Object to render using
************************************************************************* */
task EnemySetup(obj1) { //attack setup. For one boss only.
    EnemyMarker(obj1, obj1);
    EnemyName(obj1);
    MagicCircleCustom(obj1, obj1, 1, 0.4);
    MagicCircleCustom(obj1, obj1, -1, 0.3);
    BossAura(obj1, obj1, 1);
    BossAura(obj1, obj1, -1);
    EMagicCircle(obj1, obj1);
}

/* *************************************************************************
*EnemySetup2(obj, obj) -- Sets up utilities for given objects
*Param: obj1 (obj) - Object to render using (must be of type OBJ_ENEMY_BOSS)
*Param: obj2 (obj) - Object to render using
************************************************************************* */
task EnemySetup2(obj1, obj2) { //attack setup. Now requires all enemy objects for multi-enemy bosses.
    EnemyMarker(obj1, obj1); //Second argument MUST BE THE OBJ_ENEMY_BOSS. That is the enemy controlling the while loop
    EnemyMarker(obj2, obj1);
    EnemyName(obj1);
    MagicCircleCustom(obj1, obj1, 1, 0.4);
    MagicCircleCustom(obj1, obj1, -1, 0.3);
    MagicCircleCustom(obj2, obj1, 1, 0.4);
    MagicCircleCustom(obj2, obj1, -1, 0.3);
    BossAura(obj1, obj1, 1);
    BossAura(obj1, obj1, -1);
    BossAura(obj2, obj1, 1);
    BossAura(obj2, obj1, -1);
    EMagicCircle(obj1, obj1);
    EMagicCircle(obj2, obj1);
}

/* *************************************************************************
*BossExplosion(double, double) -- Boss explosion sequence, from EV_USER_STAGE+777
*Param: x (double) - Boss location - y coordinate
*Param: y (double) - Boss location - x coordinate
************************************************************************* */
task BossExplosion(x, y) {
    loop(5) {
        let randrad = rand(0, 128);
        let randang = rand(0, 360);
        TExplosionA(x + randrad*cos(randang), y + randrad*sin(randang), 12, 0.5);
        wait(6);
    }
    GS(SFX_BOSSDIE);
    TExplosionA(x, y, 4, 1);
    ScreenShakeA3(60, 24);
    ascent(i in 0..12) {
        BossDieEffect(x + 60*cos(i*30), y + 60*sin(i*30));
    }
    wait(30);
    SpiralEffect(x, y);
}